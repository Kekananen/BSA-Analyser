import com.sun.javafx.property.adapter.PropertyDescriptor;
import com.sun.javafx.property.adapter.PropertyDescriptor.Listener;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;

/**
 *
 * @author Tien Tang
 */

/* The below method accepts a vcf file input, two manual user selected inputs
* for window size and increment size, and a string input for BSA method type.
* This method returns a HashMap for each chromosome number and an ArrayList that
* stores String[] versions of each variant line from a vcf file.
*/

public class SlidingWindow {
    private HashMap<String,ArrayList> CreateWindows(String file, PropertyDescriptor.Listener evt1, Listener evt2) { //input chromosome sequence and listen for window size input by user.
        
        //Step 1. Store each variant line then split each line into a String[].
        
        String[] variantLines = file.split("\n"); //store each line
        ArrayList<String[]> variantList = new ArrayList<String[]>(); //create empty arraylist to store each line as a String[]
        
        for (int i = 0; i < variantLines.length; i++) {
            String[] variant = variantLines[i].split("\t"); //split each line into a tab
            variantList.add(variant);
        };
        
        //Step 2. Get window size by converting first user input (evt1) to integer
        
        String size = evt1.toString(); //convert action to string
        int windowSize = Integer.parseInt(size); //convert string to integer
        
        //Step 3. Get increment size by converting second user input (evt2) to integer.
        
        String inc = evt2.toString(); //convert input to string.
        int incSize = Integer.parseInt(inc); //convert increment size to integer.
        
        //Step 4. Get the list of chromosomes.
        
        Iterator VLIt = variantList.iterator(); //iterate through variant list created Step 1.
        ArrayList chromList = new ArrayList(); //blank ArrayList to store chromosome numbers.
        
        while (VLIt.hasNext()) {
            String[] variant = (String[]) VLIt.next();
            String chromNo = variant[0].toString();
            if(!chromList.contains(chromNo)) { //if the chromosome is not already in the ArrayList.
                chromList.add(chromNo); //then add the chromosome number to the ArrayList.
            }
        }
        
        //Step 5. Create an ArrayList to store the windows in (windows).
        
        ArrayList windows = new ArrayList(); //create ArrayList to store the windows in
        HashMap windowHS = new HashMap<String,ArrayList>(); //create new hashmap to store sliding windows list for all chromosomes
        
        for (Iterator CNIt = chromList.iterator();CNIt.hasNext();) { //for each chromosome, while there is a next.
            Object chromNo = CNIt.next(); //store the chromosome number
            while (VLIt.hasNext()) { //while there is a next item to iterate to in the variant list
                String[] window = (String[]) VLIt.next(); //store the next variant string[]
                int position = Integer.parseInt(window[1].toString()); // and get the position as an integer
                for (int hPos = 0; hPos + windowSize <= variantList.size(); hPos += incSize) {
                if(position == hPos && position <= hPos + windowSize && window[0].toString().equals(chromNo)) {
                    windows.add(window); //add the window to the ArrayList of windows
                    }
                }
            }
            windowHS.put(chromNo,windows);
            }

        return windowHS;
    };
    
    /* THIS METHOD IS NOT COMPLETE YET.
    * The below method accepts a HashMap of sliding windows for a vcf file with
    * the chromosome number as a key. The other input is a String returned from
    * a menu option picked by the user to describe the method they wanted.
    * If no method was picked, then the method will be set to default.
    */
    
    private HashMap<Integer, Float> CalculateWindows(HashMap windowHS, String method, Listener evt2) { 
        
        HashMap<Integer, Float> values = new HashMap<Integer, Float>(); //to be returned
        Iterator it = windowHS.keySet().iterator(); //iterate through the windows
        int windowSize = Integer.parseInt(evt2.toString()); //get the window size
        while (it.hasNext()) {
            float windowAvg = 0;
            int windowNo = 1; //start at the first window
            
            if(method.equals("Homozygosity Mapping")) {
                //use this Homozygosity Mapping method
                //INSERT METHOD HERE
            }
            else if (method.equals("Allelic Distance")) {
                //use Allelic Distance Mapping method
                //USE METHOD HERE
            }
            else if (method.equals("MAF Estimation")) {
                //use MAF Estimation method
                //USE METHOD HERE
                MAFCalculation mafe = new MAFCalculation(); //not complete yet
            } else {
                //use default method for that mapping population.
                //USE METHOD HERE
            }
            
            for (int i = 0; i<=windowSize; i++) { //for each value in the window
                float value = (float) windowHS.get(i); //get the value of each item in the window
                windowAvg = windowAvg + value; //add the value to the running sum
            
        }
            
        }
        return values;
}

}
